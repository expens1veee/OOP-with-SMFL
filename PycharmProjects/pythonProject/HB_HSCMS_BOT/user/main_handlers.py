from vkbottle.bot import Message, BotLabeler
from global_variables.token import api
from global_variables.variable_holder import state_dispenser, ctx
from global_variables.states import BotStates
from global_variables.variable_holder import db_path
from database.database import new_user
from user.user_keyboards import main_kb, menu_kb, back_kb
import random
import sqlite3


main_labeler = BotLabeler()
main_labeler.vbml_ignore_case = True


@main_labeler.private_message(text=["–ù–∞—á–∞—Ç—å", "Start"])
async def start(message: Message):
    user = await api.users.get(message.from_id)
    user_name = user[0].first_name + ' ' + user[0].last_name
    new_user(message.from_id, user_name)
    await message.answer('–ó–¥–∞—Ä–æ–≤–∞, –≤–æ–ª—á–∞—Ä–∞üê∫', keyboard=main_kb(message.from_id))


@main_labeler.private_message(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏")
async def info(message: Message):
    await message.answer('–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –í–®–ö–ú–∏–° ‚Äî —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞—à–µ–π –≤—ã—Å—à–µ–π —à–∫–æ–ª—ã,'
                         ' –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –Ω–æ—Å—Ç–∞–ª—å–≥–∏–∏,'
                         ' –∞ –º–æ–∂–µ—Ç –∏ —É–∑–Ω–∞—Ç—å –¥–ª—è —Å–µ–±—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –æ –ø—Ä–æ—à–ª–æ–º –ª—é–±–∏–º–æ–π –í—ã—Å—à–µ–π —à–∫–æ–ª—ã.')


@main_labeler.private_message(text="–ú–µ–Ω—é –±–∞—Ä–∞")
async def menu(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏, —Ö–æ—á–µ—à—å –ª–∏ —Ç—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë –º–µ–Ω—é,"
        " –∏–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å –∏–∑ –±–∞—Ä–∞",
        keyboard=menu_kb())


@main_labeler.private_message(text="–°–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å")
async def get_random_cocktail(message: Message):
    cocktails = ["52", "1 –ª–∏—Ç—Ä –±–µ–Ω–∑–∏–Ω–∞ –∏ 7 —â–µ—Ç–æ–∫", "–°—Ç—Ä–∞–π–∫", "–î–∏—Ñ—Ñ—É—Ä—ã", "–ú–∞—Ç–∞—Ç—É–º–±–∞", "–ö–∏–±–µ—Ä–±—É–ª–ª–∏–Ω–≥", "–°–∫–≤–µ—Ä","–ù–µ –±–∞–≥, –∞ —Ñ–∏—á–∞","–°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å"]
    await message.answer(
        f'–ò —Ç–µ–±–µ –≤—ã–ø–∞–¥–∞–µ—Ç –ö–æ–∫—Ç–µ–π–ª—å "{cocktails[random.randint(0, 8)]}", —Å–∫–æ—Ä–µ–µ –±–µ–≥–∏ –∏ –ø—Ä–æ–±—É–π –µ–≥–æ –Ω–∞ –±–∞—Ä–µ!')

@main_labeler.private_message(text="–í—Å—ë –º–µ–Ω—é")
async def bar_menu(message: Message):
    await message.answer("–õ–æ–≤–∏! –¢–æ–ª—å–∫–æ –º–Ω–æ–≥–æ –Ω–µ –ø–µ–π)",
                         attachment='photo-213380769_457239546')


@main_labeler.private_message(text="–ù–∞–∑–∞–¥")
async def back_to_menu(message: Message):
    try:
        await state_dispenser.delete(message.from_id)
    except KeyError:
        pass
    await message.answer('–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', keyboard=main_kb(message.from_id))


@main_labeler.private_message(text="–ê—á–∏–≤–∫–∏")
async def achievement(message: Message):
    if ctx.get('achievement1') and ctx.get('achievement2'):
        await message.answer("–ê—á–∏–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å",
                             attachment=['photo-213380769_457239544', 'photo-213380769_457239545'])
    elif ctx.get('achievement1') and not ctx.get('achievement2'):
        await message.answer("–ê—á–∏–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å",
                             attachment='photo-213380769_457239544')
    elif ctx.get('achievement2') and not ctx.get('achievement1'):
        await message.answer("–ê—á–∏–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å",
                             attachment='photo-213380769_457239545')

    sqlite_connection = sqlite3.connect(db_path)
    cursor = sqlite_connection.cursor()
    sqlite_select_query = f"SELECT Achievement1, Achievement2 FROM info where vk_id =\"{message.from_id}\""
    cursor.execute(sqlite_select_query)
    data = cursor.fetchall()

    achievement_status1 = '–í—ã–ø–æ–ª–Ω–µ–Ω–∞!' if data[0][0] else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'
    achievement_status2 = '–í—ã–ø–æ–ª–Ω–µ–Ω–∞!' if data[0][1] else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'

    await message.answer(f'–¢–≤–æ–∏ –∞—á–∏–≤–∫–∏:\n\n–ê—á–∏–≤–∫–∞ 1: {achievement_status1}\n\n–ê—á–∏–≤–∫–∞ 2: {achievement_status2}')


@main_labeler.private_message(text='–í—ã–ø–æ–ª–Ω–∏—Ç—å‚úÖ')
async def complete_achievement(message: Message):
    await message.answer('–ù–∞–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç', keyboard=back_kb())
    await state_dispenser.set(message.from_id, BotStates.CHECK_ANSWER)


@main_labeler.private_message(state=BotStates.CHECK_ANSWER)
async def check_answer_first_achievement(message: Message):
    answer = '–æ—Ç–≤–µ—Ç'
    user_answer = message.text
    if user_answer.lower() == answer.lower():

        sqlite_connection = sqlite3.connect(db_path)
        cursor = sqlite_connection.cursor()
        sqlite_update_query = f"UPDATE info SET Achievement1={1} WHERE vk_id={message.from_id}"
        cursor.execute(sqlite_update_query)
        sqlite_connection.commit()

        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –∞—á–∏–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –∂–¥–∏ —Å–ª–µ–¥—É—é—â–µ–π!', main_kb(message.from_id))
        await state_dispenser.delete(message.from_id)
    else:
        await message.answer('–ë–æ—é—Å—å, —á—Ç–æ —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑', main_kb(message.from_id))


@main_labeler.private_message(text='–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ')
async def check_answer_first_achievement(message: Message):
    sqlite_connection = sqlite3.connect(db_path)
    cursor = sqlite_connection.cursor()
    sqlite_update_query = f"UPDATE info SET Achievement2={1} WHERE vk_id={message.from_id}"
    cursor.execute(sqlite_update_query)
    sqlite_connection.commit()
    await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –∞—á–∏–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!', main_kb(message.from_id))


@main_labeler.private_message(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–±–∏–≤–∫–∏")
async def teams(message: Message):
    photos = [f'photo-213380769_4572395{str(46 + i)}' for i in range(1, 6)]
    await message.answer('–í–æ—Ç –≤—Å–µ —Ä–∞–∑–±–∏–≤–∫–∏', attachment=photos)
